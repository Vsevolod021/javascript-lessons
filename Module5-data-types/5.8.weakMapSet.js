/*
let john = { name: "John" };

let map = new Map([
    [john, '...']
]);

john = null;

console.log(map);
console.log(Array.from(map.keys()));
*/

// WeakMap
// –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–º!
/*
let weakMap = new WeakMap();
let obj = {name: 'john'};

weakMap.set(obj, 'works');
console.log(weakMap);
weakMap.set('test', 'doesn\'t work');
console.log(weakMap);


let john = { name: "John" };

let weakmap = new WeakMap();

weakmap.set(john, 'kfdnavldsf');
console.log(weakmap);

john = null;

setTimeout(() => console.log(weakmap), 6000); // —É–∂–µ —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥ weakmap –Ω–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–µ–±–µ –æ john,
                                              //—Ç.–∫. –∏—Ö —É–Ω–∏—á—Ç–æ–∂–∏—Ç —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞




*/

// –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø WeakMap: –£–î–ê–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï, –ü–û–°–õ–ï –¢–û–ì–û –ö–ê–ö –û–ù –ü–û–ö–ò–ù–£–õ –°–¢–†–ê–ù–ò–¶–£ 
/*

// üìÅ visitsCount.js
let visitsCountMap = new WeakMap(); // map: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å => —á–∏—Å–ª–æ –≤–∏–∑–∏—Ç–æ–≤

// —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
function countUser(user) {
  let count = visitsCountMap.get(user) || 0;
  visitsCountMap.set(user, count + 1);
}

// üìÅ main.js
let john = { name: "John" };


countUser(john); // –≤–µ–¥—ë–º –ø–æ–¥—Å—á—ë—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π

// –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Å
john = null; // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞–¥–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ —É–¥–∞–ª–∏—Ç—å

*/


// –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø WeakMap: –ö–≠–®–ò–†–û–í–ê–ù–ò–ï
/*
// üìÅ cache.js
let cache = new WeakMap();

// –≤—ã—á–∏—Å–ª—è–µ–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
function process(obj) {
  if (!cache.has(obj)) {
    let result =  obj;

    cache.set(obj, result);
  }

  return cache.get(obj);
}

// –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º process() –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ:

// üìÅ main.js
let obj = {};

let result1 = process(obj); // –≤—ã—á–∏—Å–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç

// ...–ø–æ–∑–∂–µ, –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—Ç–∞ –≤ –∫–æ–¥–µ...
let result2 = process(obj); // —Ä–∞–Ω–µ–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑—è—Ç –∏–∑ –∫–µ—à–∞

// ...–ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –æ–±—ä–µ–∫—Ç –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω:
obj = null;

alert(cache.size); // 0

// —É WeakMap –∏ WeakSet –Ω–µ–ª—å–∑—è –≤–∑—è—Ç—å –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
*/

// Task #1
let weakset = new WeakSet();

let messages = [
  {text: "Hello", from: "John"},
  {text: "How goes?", from: "John"},
  {text: "See you soon", from: "Alice"}
];


weakset.add(messages[0]);
weakset.add(messages[1]);

console.log(weakset);


messages.shift();
messages.shift();
messages.shift();

setTimeout(() => console.log(weakset), 20000); // —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥ –≤—Å–µ –æ—á–∏—Å—Ç–∏–ª–æ—Å—å
console.log(messages);

// Task #2
let weakmap = new WeakMap();

weakmap.set(messages[0], new Date(2017, 1, 1));

console.log(weakmap);

messages.shift() // –æ—á–∏—Å—Ç–∫–∞

setTimeout(() => console.log(weakmap), 10000); // —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –≤—Å–µ –æ—á–∏—Å—Ç–∏–ª–æ—Å—å
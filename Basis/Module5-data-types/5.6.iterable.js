// –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä for of –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ range
/*
let range = {
    from: 5,
    to: 1
}

range[Symbol.iterator] = function() {
    return {
        current: this.from,
        last: this.to,

        next() {
            if (this.current >= this.last) {
                return {done: false, value: this.current--};
            } else {
                return {done: true};
            }
        }
    };
}


let range = {
    from: 5,
    to: 1,

    [Symbol.iterator]() {
        this.current = this.from;
        return this;
    },

    next() {
        if (this.current >= this.to) {
            return {done: false, value: this.current--};
        } else {
            return {done: true};
        }
    }

}

    
for (let num of range) {
    alert(num);
}
*/

// –ø–µ—Ä–µ–±–æ—Ä —Å—Ç—Ä–æ–∫
/*
for (let char of 'hello world') {
    alert(char);
}
*/

// —è–≤–Ω—ã–π –≤—ã–∑–æ–≤
/*
let str = 'hello4';

let iterator = str[Symbol.iterator]();

while (true) {
  let result = iterator.next();
  if (result.done) break;
  alert(result.value); // –≤—ã–≤–æ–¥–∏—Ç —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
}
*/
let str = 'hello world';

let arr = Array.from(str);
console.log(arr);

let str1 = 'ùí≥üòÇ';
alert(Array.from(str1));

// Array.from() –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç split –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã (—Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –≤ 4 –±–∞–π—Ç–∞, –∞ –Ω–µ –≤ 2)
// —Ç.–µ. –≤—Å—è–∫–∏–µ –ö–†–ê–ö–û–ó–Ø–ë–†–´,